
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Feb 07 17:53:31 CET 2022
//----------------------------------------------------

package mini_c;

import java_cup.runtime.*;
import java.util.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Feb 07 17:53:31 CET 2022
  */
public class parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\073\000\002\002\004\000\002\002\003\000\002\003" +
    "\003\000\002\003\003\000\002\003\004\000\002\004\004" +
    "\000\002\005\010\000\002\005\003\000\002\010\005\000" +
    "\002\020\004\000\002\006\010\000\002\013\004\000\002" +
    "\014\006\000\002\021\003\000\002\021\005\000\002\021" +
    "\007\000\002\021\011\000\002\021\004\000\002\021\007" +
    "\000\002\021\003\000\002\022\003\000\002\022\005\000" +
    "\002\023\003\000\002\023\003\000\002\023\004\000\002" +
    "\023\004\000\002\023\004\000\002\023\004\000\002\023" +
    "\005\000\002\023\005\000\002\023\005\000\002\023\005" +
    "\000\002\023\005\000\002\023\005\000\002\023\005\000" +
    "\002\023\005\000\002\023\005\000\002\023\005\000\002" +
    "\023\006\000\002\023\005\000\002\023\007\000\002\026" +
    "\002\000\002\026\003\000\002\025\005\000\002\025\003" +
    "\000\002\016\005\000\002\016\003\000\002\017\005\000" +
    "\002\017\003\000\002\012\003\000\002\012\005\000\002" +
    "\012\002\000\002\007\004\000\002\007\002\000\002\011" +
    "\004\000\002\011\002\000\002\015\004\000\002\015\002" +
    "\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\010\002\uffcc\007\013\010\007\001\002\000" +
    "\010\002\uffcc\007\013\010\007\001\002\000\004\002\160" +
    "\001\002\000\006\004\025\033\030\001\002\000\004\004" +
    "\014\001\002\000\006\004\ufffe\033\ufffe\001\002\000\004" +
    "\002\000\001\002\000\010\002\ufffa\007\ufffa\010\ufffa\001" +
    "\002\000\006\004\uffff\033\uffff\001\002\000\010\004\uffc7" +
    "\020\016\033\uffc7\001\002\000\006\004\ufffc\033\ufffc\001" +
    "\002\000\010\007\013\010\021\021\uffca\001\002\000\042" +
    "\004\uffca\005\uffca\007\013\010\021\011\uffca\013\uffca\014" +
    "\uffca\015\uffca\016\uffca\020\uffca\021\uffca\026\uffca\032\uffca" +
    "\033\uffca\036\uffca\037\uffca\001\002\000\006\004\025\033" +
    "\030\001\002\000\004\004\025\001\002\000\004\021\023" +
    "\001\002\000\004\037\024\001\002\000\010\002\ufffb\007" +
    "\ufffb\010\ufffb\001\002\000\042\004\uffc7\006\uffc7\016\uffc7" +
    "\017\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7\027\uffc7\030" +
    "\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035\uffc7\037\uffc7" +
    "\001\002\000\004\037\033\001\002\000\006\022\031\037" +
    "\uffd3\001\002\000\006\004\ufffd\033\ufffd\001\002\000\004" +
    "\004\025\001\002\000\004\037\uffd4\001\002\000\042\004" +
    "\ufff9\005\ufff9\007\ufff9\010\ufff9\011\ufff9\013\ufff9\014\ufff9" +
    "\015\ufff9\016\ufff9\020\ufff9\021\ufff9\026\ufff9\032\ufff9\033" +
    "\ufff9\036\ufff9\037\ufff9\001\002\000\036\004\uffcb\005\uffcb" +
    "\011\uffcb\013\uffcb\014\uffcb\015\uffcb\016\uffcb\020\uffcb\021" +
    "\uffcb\026\uffcb\032\uffcb\033\uffcb\036\uffcb\037\uffcb\001\002" +
    "\000\004\016\036\001\002\000\010\007\013\010\021\017" +
    "\uffce\001\002\000\006\017\uffd0\022\156\001\002\000\006" +
    "\004\025\033\030\001\002\000\004\017\042\001\002\000" +
    "\004\020\044\001\002\000\010\002\ufff7\007\ufff7\010\ufff7" +
    "\001\002\000\042\004\uffca\005\uffca\007\013\010\021\011" +
    "\uffca\013\uffca\014\uffca\015\uffca\016\uffca\020\uffca\021\uffca" +
    "\026\uffca\032\uffca\033\uffca\036\uffca\037\uffca\001\002\000" +
    "\036\004\025\005\064\011\060\013\054\014\057\015\050" +
    "\016\053\020\044\021\uffc8\026\061\032\063\033\046\036" +
    "\056\037\051\001\002\000\022\004\025\005\064\015\050" +
    "\016\053\026\061\032\063\033\046\036\056\001\002\000" +
    "\040\004\uffee\005\uffee\011\uffee\012\uffee\013\uffee\014\uffee" +
    "\015\uffee\016\uffee\020\uffee\021\uffee\026\uffee\032\uffee\033" +
    "\uffee\036\uffee\037\uffee\001\002\000\004\016\150\001\002" +
    "\000\040\004\ufff4\005\ufff4\011\ufff4\012\ufff4\013\ufff4\014" +
    "\ufff4\015\ufff4\016\ufff4\020\ufff4\021\ufff4\026\ufff4\032\ufff4" +
    "\033\ufff4\036\ufff4\037\ufff4\001\002\000\030\006\075\024" +
    "\074\025\073\027\077\030\076\031\100\032\072\033\103" +
    "\034\102\035\101\037\147\001\002\000\022\004\025\005" +
    "\064\015\050\016\053\026\061\032\063\033\046\036\056" +
    "\001\002\000\004\016\141\001\002\000\004\021\140\001" +
    "\002\000\022\004\025\005\064\015\050\016\053\026\061" +
    "\032\063\033\046\036\056\001\002\000\022\004\025\005" +
    "\064\015\050\016\053\026\061\032\063\033\046\036\056" +
    "\001\002\000\004\016\127\001\002\000\022\004\025\005" +
    "\064\015\050\016\053\026\061\032\063\033\046\036\056" +
    "\001\002\000\040\006\uffed\016\117\017\uffed\022\uffed\023" +
    "\uffed\024\uffed\025\uffed\027\uffed\030\uffed\031\uffed\032\uffed" +
    "\033\uffed\034\uffed\035\uffed\037\uffed\001\002\000\022\004" +
    "\025\005\064\015\050\016\053\026\061\032\063\033\046" +
    "\036\056\001\002\000\034\006\uffea\017\uffea\022\uffea\024" +
    "\uffea\025\uffea\027\uffea\030\uffea\031\uffea\032\uffea\033\uffea" +
    "\034\uffea\035\uffea\037\uffea\001\002\000\036\006\uffeb\017" +
    "\uffeb\022\uffeb\023\070\024\uffeb\025\uffeb\027\uffeb\030\uffeb" +
    "\031\uffeb\032\uffeb\033\uffeb\034\uffeb\035\uffeb\037\uffeb\001" +
    "\002\000\036\004\025\005\064\011\060\013\054\014\057" +
    "\015\050\016\053\020\044\021\uffc8\026\061\032\063\033" +
    "\046\036\056\037\051\001\002\000\004\021\uffc9\001\002" +
    "\000\022\004\025\005\064\015\050\016\053\026\061\032" +
    "\063\033\046\036\056\001\002\000\034\006\075\017\uffe5" +
    "\022\uffe5\024\074\025\073\027\077\030\076\031\100\032" +
    "\072\033\103\034\102\035\101\037\uffe5\001\002\000\022" +
    "\004\025\005\064\015\050\016\053\026\061\032\063\033" +
    "\046\036\056\001\002\000\022\004\025\005\064\015\050" +
    "\016\053\026\061\032\063\033\046\036\056\001\002\000" +
    "\022\004\025\005\064\015\050\016\053\026\061\032\063" +
    "\033\046\036\056\001\002\000\022\004\025\005\064\015" +
    "\050\016\053\026\061\032\063\033\046\036\056\001\002" +
    "\000\022\004\025\005\064\015\050\016\053\026\061\032" +
    "\063\033\046\036\056\001\002\000\022\004\025\005\064" +
    "\015\050\016\053\026\061\032\063\033\046\036\056\001" +
    "\002\000\022\004\025\005\064\015\050\016\053\026\061" +
    "\032\063\033\046\036\056\001\002\000\004\004\106\001" +
    "\002\000\022\004\025\005\064\015\050\016\053\026\061" +
    "\032\063\033\046\036\056\001\002\000\022\004\025\005" +
    "\064\015\050\016\053\026\061\032\063\033\046\036\056" +
    "\001\002\000\034\006\uffe0\017\uffe0\022\uffe0\024\uffe0\025" +
    "\uffe0\027\uffe0\030\uffe0\031\uffe0\032\uffe0\033\uffe0\034\uffe0" +
    "\035\101\037\uffe0\001\002\000\034\006\uffdf\017\uffdf\022" +
    "\uffdf\024\uffdf\025\uffdf\027\uffdf\030\uffdf\031\uffdf\032\uffdf" +
    "\033\uffdf\034\uffdf\035\101\037\uffdf\001\002\000\036\006" +
    "\uffec\017\uffec\022\uffec\023\uffec\024\uffec\025\uffec\027\uffec" +
    "\030\uffec\031\uffec\032\uffec\033\uffec\034\uffec\035\uffec\037" +
    "\uffec\001\002\000\034\006\uffe2\017\uffe2\022\uffe2\024\uffe2" +
    "\025\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\103\034" +
    "\102\035\101\037\uffe2\001\002\000\034\006\075\017\uffe4" +
    "\022\uffe4\024\uffe4\025\uffe4\027\uffe4\030\uffe4\031\100\032" +
    "\072\033\103\034\102\035\101\037\uffe4\001\002\000\034" +
    "\006\075\017\uffe3\022\uffe3\024\uffe3\025\uffe3\027\uffe3\030" +
    "\uffe3\031\100\032\072\033\103\034\102\035\101\037\uffe3" +
    "\001\002\000\034\006\uffde\017\uffde\022\uffde\024\uffde\025" +
    "\uffde\027\uffde\030\uffde\031\100\032\072\033\103\034\102" +
    "\035\101\037\uffde\001\002\000\034\006\075\017\uffdc\022" +
    "\uffdc\024\uffdc\025\073\027\077\030\076\031\100\032\072" +
    "\033\103\034\102\035\101\037\uffdc\001\002\000\034\006" +
    "\075\017\uffdd\022\uffdd\024\uffdd\025\uffdd\027\077\030\076" +
    "\031\100\032\072\033\103\034\102\035\101\037\uffdd\001" +
    "\002\000\034\006\uffe1\017\uffe1\022\uffe1\024\uffe1\025\uffe1" +
    "\027\uffe1\030\uffe1\031\uffe1\032\uffe1\033\103\034\102\035" +
    "\101\037\uffe1\001\002\000\034\006\uffe9\017\uffe9\022\uffe9" +
    "\024\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\101\037\uffe9\001\002\000\024\004\025" +
    "\005\064\015\050\016\053\017\uffd8\026\061\032\063\033" +
    "\046\036\056\001\002\000\004\017\125\001\002\000\004" +
    "\017\uffd7\001\002\000\032\006\075\017\uffd5\022\123\024" +
    "\074\025\073\027\077\030\076\031\100\032\072\033\103" +
    "\034\102\035\101\001\002\000\022\004\025\005\064\015" +
    "\050\016\053\026\061\032\063\033\046\036\056\001\002" +
    "\000\004\017\uffd6\001\002\000\034\006\uffdb\017\uffdb\022" +
    "\uffdb\024\uffdb\025\uffdb\027\uffdb\030\uffdb\031\uffdb\032\uffdb" +
    "\033\uffdb\034\uffdb\035\uffdb\037\uffdb\001\002\000\034\006" +
    "\075\017\uffe7\022\uffe7\024\074\025\073\027\077\030\076" +
    "\031\100\032\072\033\103\034\102\035\101\037\uffe7\001" +
    "\002\000\022\004\025\005\064\015\050\016\053\026\061" +
    "\032\063\033\046\036\056\001\002\000\030\006\075\017" +
    "\131\024\074\025\073\027\077\030\076\031\100\032\072" +
    "\033\103\034\102\035\101\001\002\000\034\004\025\005" +
    "\064\011\060\013\054\014\057\015\050\016\053\020\044" +
    "\026\061\032\063\033\046\036\056\037\051\001\002\000" +
    "\040\004\ufff2\005\ufff2\011\ufff2\012\133\013\ufff2\014\ufff2" +
    "\015\ufff2\016\ufff2\020\ufff2\021\ufff2\026\ufff2\032\ufff2\033" +
    "\ufff2\036\ufff2\037\ufff2\001\002\000\034\004\025\005\064" +
    "\011\060\013\054\014\057\015\050\016\053\020\044\026" +
    "\061\032\063\033\046\036\056\037\051\001\002\000\040" +
    "\004\ufff1\005\ufff1\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015" +
    "\ufff1\016\ufff1\020\ufff1\021\ufff1\026\ufff1\032\ufff1\033\ufff1" +
    "\036\ufff1\037\ufff1\001\002\000\030\006\075\024\074\025" +
    "\073\027\077\030\076\031\100\032\072\033\103\034\102" +
    "\035\101\037\136\001\002\000\040\004\ufff3\005\ufff3\011" +
    "\ufff3\012\ufff3\013\ufff3\014\ufff3\015\ufff3\016\ufff3\020\ufff3" +
    "\021\ufff3\026\ufff3\032\ufff3\033\ufff3\036\ufff3\037\ufff3\001" +
    "\002\000\034\006\uffe8\017\uffe8\022\uffe8\024\uffe8\025\uffe8" +
    "\027\uffe8\030\uffe8\031\uffe8\032\uffe8\033\uffe8\034\uffe8\035" +
    "\101\037\uffe8\001\002\000\046\002\ufff5\004\ufff5\005\ufff5" +
    "\007\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\014\ufff5\015" +
    "\ufff5\016\ufff5\020\ufff5\021\ufff5\026\ufff5\032\ufff5\033\ufff5" +
    "\036\ufff5\037\ufff5\001\002\000\022\004\025\005\064\015" +
    "\050\016\053\026\061\032\063\033\046\036\056\001\002" +
    "\000\030\006\075\017\143\024\074\025\073\027\077\030" +
    "\076\031\100\032\072\033\103\034\102\035\101\001\002" +
    "\000\034\004\025\005\064\011\060\013\054\014\057\015" +
    "\050\016\053\020\044\026\061\032\063\033\046\036\056" +
    "\037\051\001\002\000\040\004\uffef\005\uffef\011\uffef\012" +
    "\uffef\013\uffef\014\uffef\015\uffef\016\uffef\020\uffef\021\uffef" +
    "\026\uffef\032\uffef\033\uffef\036\uffef\037\uffef\001\002\000" +
    "\030\006\075\017\146\024\074\025\073\027\077\030\076" +
    "\031\100\032\072\033\103\034\102\035\101\001\002\000" +
    "\034\006\uffda\017\uffda\022\uffda\024\uffda\025\uffda\027\uffda" +
    "\030\uffda\031\uffda\032\uffda\033\uffda\034\uffda\035\uffda\037" +
    "\uffda\001\002\000\040\004\ufff0\005\ufff0\011\ufff0\012\ufff0" +
    "\013\ufff0\014\ufff0\015\ufff0\016\ufff0\020\ufff0\021\ufff0\026" +
    "\ufff0\032\ufff0\033\ufff0\036\ufff0\037\ufff0\001\002\000\004" +
    "\010\151\001\002\000\004\004\152\001\002\000\004\017" +
    "\153\001\002\000\034\006\uffd9\017\uffd9\022\uffd9\024\uffd9" +
    "\025\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\034" +
    "\uffd9\035\uffd9\037\uffd9\001\002\000\034\006\uffe6\017\uffe6" +
    "\022\uffe6\024\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6\032" +
    "\uffe6\033\uffe6\034\uffe6\035\101\037\uffe6\001\002\000\006" +
    "\017\ufff6\022\ufff6\001\002\000\010\007\013\010\021\017" +
    "\uffce\001\002\000\004\017\uffcf\001\002\000\004\002\001" +
    "\001\002\000\004\002\uffcd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\157\000\016\002\004\003\005\004\007\005\003\006" +
    "\011\007\010\001\001\000\014\003\005\004\007\005\003" +
    "\006\011\007\160\001\001\000\002\001\001\000\004\024" +
    "\034\001\001\000\004\024\014\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\017\004\007" +
    "\010\016\011\021\001\001\000\012\003\017\004\007\010" +
    "\016\011\033\001\001\000\006\016\025\024\026\001\001" +
    "\000\004\024\014\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\031\024" +
    "\026\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\037\004\007\012" +
    "\040\013\036\001\001\000\002\001\001\000\004\024\154" +
    "\001\001\000\002\001\001\000\004\014\042\001\001\000" +
    "\002\001\001\000\012\003\017\004\007\010\016\011\044" +
    "\001\001\000\016\014\046\015\054\021\065\022\064\023" +
    "\051\024\061\001\001\000\010\022\064\023\153\024\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\022\064\023\144\024\061" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\022" +
    "\064\023\136\024\061\001\001\000\010\022\064\023\134" +
    "\024\061\001\001\000\002\001\001\000\010\022\064\023" +
    "\125\024\061\001\001\000\002\001\001\000\010\022\064" +
    "\023\115\024\061\001\001\000\002\001\001\000\002\001" +
    "\001\000\016\014\046\015\066\021\065\022\064\023\051" +
    "\024\061\001\001\000\002\001\001\000\010\022\064\023" +
    "\070\024\061\001\001\000\002\001\001\000\010\022\064" +
    "\023\114\024\061\001\001\000\010\022\064\023\113\024" +
    "\061\001\001\000\010\022\064\023\112\024\061\001\001" +
    "\000\010\022\064\023\111\024\061\001\001\000\010\022" +
    "\064\023\110\024\061\001\001\000\010\022\064\023\107" +
    "\024\061\001\001\000\010\022\064\023\106\024\061\001" +
    "\001\000\002\001\001\000\010\022\064\023\104\024\061" +
    "\001\001\000\010\022\064\023\103\024\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\022\064\023\121\024\061\025" +
    "\120\026\117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\022\064\023\121\024\061\025" +
    "\123\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\022\064\023\127\024\061\001\001\000" +
    "\002\001\001\000\014\014\046\021\131\022\064\023\051" +
    "\024\061\001\001\000\002\001\001\000\014\014\046\021" +
    "\133\022\064\023\051\024\061\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\022\064\023\141\024\061\001\001" +
    "\000\002\001\001\000\014\014\046\021\143\022\064\023" +
    "\051\024\061\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\003\037\004\007\012" +
    "\156\013\036\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ident ::= IDENT 
            {
              Pstring RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pstring(id, new Loc(idleft, idright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ident",18, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // list_stmt ::= 
            {
              LinkedList<Pstmt> RESULT =null;
		 RESULT = new LinkedList<Pstmt>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // list_stmt ::= stmt list_stmt 
            {
              LinkedList<Pstmt> RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pstmt s = (Pstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pstmt> l = (LinkedList<Pstmt>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(s); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_stmt",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // list_decl_var ::= 
            {
              LinkedList<Pdeclvar> RESULT =null;
		 RESULT = new LinkedList<Pdeclvar>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_decl_var",7, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // list_decl_var ::= decl_var list_decl_var 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Pdeclvar> d = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pdeclvar> l = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 for (Pdeclvar x: d) l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_decl_var",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // list_decl ::= 
            {
              LinkedList<Pdecl> RESULT =null;
		 RESULT = new LinkedList<Pdecl>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // list_decl ::= decl list_decl 
            {
              LinkedList<Pdecl> RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pdecl d = (Pdecl)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pdecl> l = (LinkedList<Pdecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(d); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_decl",5, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // list_comma_formal ::= 
            {
              LinkedList<Pdeclvar> RESULT =null;
		 RESULT = new LinkedList<Pdeclvar>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // list_comma_formal ::= formal COMMA list_comma_formal 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pdeclvar x = (Pdeclvar)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pdeclvar> l = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // list_comma_formal ::= formal 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pdeclvar x = (Pdeclvar)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
   	  l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_formal",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // nonempty_list_comma_star_ident ::= star_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Pstring> l = new LinkedList<Pstring>();
      l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_star_ident",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // nonempty_list_comma_star_ident ::= star_ident COMMA nonempty_list_comma_star_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pstring> l = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_star_ident",13, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // nonempty_list_comma_ident ::= ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Pstring> l = new LinkedList<Pstring>();
      l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",12, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // nonempty_list_comma_ident ::= ident COMMA nonempty_list_comma_ident 
            {
              LinkedList<Pstring> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pstring> l = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_ident",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // nonempty_list_comma_expr ::= expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr x = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 LinkedList<Pexpr> l = new LinkedList<Pexpr>();
      l.add(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // nonempty_list_comma_expr ::= expr COMMA nonempty_list_comma_expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr x = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 l.addFirst(x); RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("nonempty_list_comma_expr",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // list_comma_expr ::= nonempty_list_comma_expr 
            {
              LinkedList<Pexpr> RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // list_comma_expr ::= 
            {
              LinkedList<Pexpr> RESULT =null;
		 RESULT = new LinkedList<Pexpr>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("list_comma_expr",20, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // expr ::= SIZEOF LP STRUCT IDENT RP 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Psizeof(id, new Loc(opleft, opright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // expr ::= LP expr RP 
            {
              Pexpr RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = e; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // expr ::= ident LP list_comma_expr RP 
            {
              Pexpr RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Pexpr> l = (LinkedList<Pexpr>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Pcall (f, l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // expr ::= expr BARBAR expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bor, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // expr ::= expr AMPAMP expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Band, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // expr ::= expr CMP expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Binop c = (Binop)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(c, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // expr ::= expr DIV expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bdiv, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // expr ::= expr TIMES expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bmul, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // expr ::= expr MINUS expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bsub, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // expr ::= expr PLUS expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Badd, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // expr ::= expr NEQ expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Bneq, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // expr ::= expr EQ expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pbinop(Binop.Beq, e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // expr ::= lvalue EQUAL expr 
            {
              Pexpr RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Plvalue e1 = (Plvalue)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e2 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Passign(e1, e2); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // expr ::= TIMES expr 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Punop(Unop.Uderef, e1, new Loc(opleft, opright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // expr ::= AMP expr 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Punop(Unop.Uref, e1, new Loc(opleft, opright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // expr ::= NOT expr 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Punop(Unop.Unot, e1, new Loc(opleft, opright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // expr ::= MINUS expr 
            {
              Pexpr RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Punop(Unop.Uneg, e1, new Loc(opleft, opright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expr ::= INTEGER 
            {
              Pexpr RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pint(c, new Loc(cleft, cright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expr ::= lvalue 
            {
              Pexpr RESULT =null;
		int lvleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lvright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Plvalue lv = (Plvalue)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = lv; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("expr",17, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // lvalue ::= expr ARROW IDENT 
            {
              Plvalue RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr e1 = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Parrow(e1, id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // lvalue ::= ident 
            {
              Plvalue RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring id = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pident(id); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("lvalue",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // stmt ::= bloc 
            {
              Pstmt RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = b; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // stmt ::= WHILE LP expr RP stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Pwhile(c, s1, new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // stmt ::= expr SEMICOLON 
            {
              Pstmt RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Peval(e); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // stmt ::= IF LP expr RP stmt ELSE stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstmt s2 = (Pstmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Pif(c, s1, s2, new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // stmt ::= IF LP expr RP stmt 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Pexpr c = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int s1left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int s1right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstmt s1 = (Pstmt)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 Loc locif = new Loc(locleft, locright);
       RESULT =  new Pif(c, s1, new Pskip(locif), locif); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // stmt ::= RETURN expr SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pexpr e = (Pexpr)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT =  new Preturn(e, new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // stmt ::= SEMICOLON 
            {
              Pstmt RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT =  new Pskip(new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("stmt",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bloc ::= LBRA list_decl_var list_stmt RBRA 
            {
              Pbloc RESULT =null;
		int locleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int locright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		Object loc = (Object)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int vlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int vlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pdeclvar> vl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Pstmt> sl = (LinkedList<Pstmt>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Pbloc(vl, sl, new Loc(locleft, locright)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("bloc",10, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // formal ::= type ident 
            {
              Pdeclvar RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Ptype t = (Ptype)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pdeclvar(t, x); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("formal",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // decl_fun ::= type ident LP list_comma_formal RP bloc 
            {
              Pdecl RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)).right;
		Ptype t = (Ptype)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-5)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		Pstring f = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int plleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int plright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pdeclvar> pl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pbloc b = (Pbloc)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pfun(t, f, pl, b); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_fun",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // star_ident ::= TIMES ident 
            {
              Pstring RESULT =null;
		int xleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int xright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring x = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = x; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("star_ident",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // decl_var ::= type nonempty_list_comma_ident SEMICOLON 
            {
              LinkedList<Pdeclvar> RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		Ptype t = (Ptype)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int xlleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int xlright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		LinkedList<Pstring> xl = (LinkedList<Pstring>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 LinkedList<Pdeclvar> l = new LinkedList<Pdeclvar>();
       for (Pstring x: xl) l.add(new Pdeclvar(t, x));
       RESULT = l; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl_var",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // decl ::= decl_fun 
            {
              Pdecl RESULT =null;
		int dleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int dright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pdecl d = (Pdecl)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = d; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // decl ::= STRUCT IDENT LBRA list_decl_var RBRA SEMICOLON 
            {
              Pdecl RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String s = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		LinkedList<Pdeclvar> fl = (LinkedList<Pdeclvar>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		 RESULT = new Pstruct(s, fl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("decl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-5)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // type_struct ::= STRUCT ident 
            {
              PTypeStruct RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		Pstring i = (Pstring)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new PTypeStruct(i); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type_struct",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // type ::= type TIMES 
            {
              Ptype RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Ptype t = (Ptype)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		 RESULT = new Ppointer(t); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // type ::= type_struct 
            {
              Ptype RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		PTypeStruct i = (PTypeStruct)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = i; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // type ::= INT 
            {
              Ptype RESULT =null;
		 RESULT = Ptype.ptint; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("type",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // file ::= list_decl 
            {
              Pfile RESULT =null;
		int lleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int lright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		LinkedList<Pdecl> l = (LinkedList<Pdecl>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new Pfile(l); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("file",0, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= file EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		Pfile start_val = (Pfile)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

